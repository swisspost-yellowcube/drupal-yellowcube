<?php

/**
 * @file
 * YellowCube integration module for Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function yellowcube_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/yellowcube'] = array(
    'title' => 'YellowCube',
    'description' => 'Configure YellowCube integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellowcube_admin_settings_form'),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file' => 'includes/yellowcube.admin.inc',
  );

  $items['admin/commerce/config/yellowcube_stock'] = array(
    'title' => 'YellowCube stock management',
    'description' => 'YellowCube stock management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellowcube_inventory_form'),
    'access arguments' => array('administer commerce_product entities'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file' => 'includes/yellowcube.admin.inc',
  );





  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function yellowcube_commerce_shipping_method_info() {
  return array(
    'yellowcube' => array(
      'title' => t('YellowCube'),
      'description' => t('Configure shipping through YellowCube'),
    ),
  );
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function yellowcube_commerce_shipping_service_info() {
  $services = array();

  $services['yellowcube'] = array(
    'title' => t('YellowCube'),
    'display_title' => t('YellowCube'),
    'description' => '',
    'shipping_method' => 'yellowcube',
    'callbacks' => array(
      'rate' => 'yellowcube_service_rate_order',
    ),
  );

  return $services;
}

/**
 * Implements hook_cron().
 */
function yellowcube_cron() {
  module_load_include('jobs.inc', 'yellowcube');

  //yellowcube_job_submit_new_orders();
  yellowcube_jobs_fetch_order_updates();
}

/**
 * Implements hook_commerce_order_state_info().
 */
function yellowcube_commerce_order_state_info() {
  $order_states = array();

  $order_states['yellowcube'] = array(
    'name' => 'yellowcube',
    'title' => t('YellowCube'),
    'description' => t('Orders in this state are somewhere in the process of being handled by YellowCube.'),
    'weight' => 7,
    'default_status' => 'yellowcube_send',
  );

  return $order_states;
}

/**
 * Implements hook_commerce_order_state_info().
 */
function yellowcube_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['yellowcube_send'] = array(
    'name' => 'yellowcube_send',
    'title' => variable_get('yellowcube_status_label_received', 'YellowCube: send to YellowCube'),
    'state' => 'yellowcube',
  );

  $order_statuses['yellowcube_received'] = array(
    'name' => 'yellowcube_received',
    'title' => variable_get('yellowcube_status_label_sending', 'YellowCube: received by YellowCube'),
    'state' => 'yellowcube',
  );

  $order_statuses['yellowcube_send_failed'] = array(
    'name' => 'yellowcube_send_failed',
    'title' => variable_get('yellowcube_status_label_failed', 'YellowCube: sending to YellowCube failed'),
    'state' => 'yellowcube',
  );

  return $order_statuses;
}

/**
 * Shipping service callback: returns the base rate for a flat rate service.
 */
function yellowcube_service_rate_order($shipping_service, $order) {
  return array();
}

/**
 * Product data transmission batch definition: ART
 */
function yellowcube_batch_send_data() {

  $product_count = db_query("SELECT COUNT(DISTINCT product_id) FROM {commerce_product} WHERE (type = 'yellowcube_demo_product')")->fetchField();

  $products = db_select('commerce_product', 'cp')
    ->fields('cp', array('product_id', 'sku'))
    ->orderBy('cp.product_id', 'ASC')
    ->where('type = :type', array(':type' => 'yellowcube_demo_product'))
    ->execute();

  // Give helpful information about how many products are being operated on.
  drupal_set_message(
    t('There are @product_count products to be transferred.',
      array(
        '@product_count' => $product_count,
      )
    )
  );

  $operations = array();
  foreach($products as $product) {
    $operations[] = array(
      'yellowcube_batch_operation_send_product', array($product),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'yellowcube_batch_send_data_finished',
    'title' => t('Processing product data submission'),
    'init_message' => t('Product submission started.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Product submission has encountered an error.'),
    'file' => 'includes/yellowcube.admin.inc',
  );
  return $batch;
}

/**
 *  Batch operation for sending data ART
 */
function yellowcube_batch_operation_send_product($current_product, &$context) {
  module_load_include('client.inc', 'yellowcube');

  //load the product and send it to yellowcube
  $product = commerce_product_load($current_product->product_id, NULL, TRUE);
  yellowcube_client_update_product($product->sku);
  $context['results'][] = $product->sku . ' : ' . check_plain($product->title);
  $context['sandbox']['progress']++;
  $context['message'] = t('Now processing %product: %sku', array('%product' => check_plain($product->title), '%sku' => $product->sku));
}

/**
 * Batch 'finished' callback used for sending data
 */
function yellowcube_batch_send_data_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The product data submission to YellowCube was successfully completed'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * Product data transmission batch definition: ART
 */
function yellowcube_batch_fetch_inventory_data() {
  $service = yellowcube_client_get_service();

  //Get all stock items from yellowcube
  $stock_items = $service->getInventory();

  $product_count = count($stock_items);

  // Give helpful information about how many products are being operated on.
  drupal_set_message(
    t('YellowCube reports @product_count products with a stock level.',
      array(
        '@product_count' => $product_count,
      )
    )
  );

  $operations = array();
  foreach($stock_items as $product){
    $operations[] = array(
      'yellowcube_batch_operation_update_stock', array(
        array('art-no' => $product->getArticleNo(), 'qty' => $product->getQuantityUOM()->get())),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'yellowcube_batch_fetch_inventory_finished',
    'title' => t('Processing product data submission'),
    'init_message' => t('Product submission started.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Product submission has encountered an error.'),
    'file' => 'includes/yellowcube.admin.inc',
  );
  return $batch;
}

/**
 *  Batch operation for sending data ART
 */
function yellowcube_batch_operation_update_stock($stock_item, &$context) {
  $article_no = $stock_item['art-no'];

  //unfortunately, not all stock items have an article number
  if (!empty($article_no)) {

    //We try to find the according product in our shop
    $product = commerce_product_load_by_sku($article_no);

    if ($product) {
      yellowcube_stock_adjust($product, $stock_item['qty']);
    }
  }

}

/**
 * Set a particular product SKU to a fixed stock value.
 */
function yellowcube_stock_adjust($product, $new_stock) {
  if (!commerce_ss_product_type_enabled($product->type)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('commerce_product', $product);
  $wrapper->commerce_stock->set($new_stock);
  $result = $wrapper->save();

  if ($result) {
    watchdog('commerce_stock', 'Modified stock level of product %sku to %amount', array('%sku' => $product->sku, '%amount' => $new_stock));
  }
}


/**
 * Batch 'finished' callback used for sending data
 */
function yellowcube_batch_fetch_inventory_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The stock update was successful'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}
