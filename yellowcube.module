<?php
/**
 * @file
 * YellowCube integration module for Drupal Commerce.
 */

define('YELLOWCUBE_OPERATING_MODE_PROD', 'P');
define('YELLOWCUBE_OPERATING_MODE_TEST', 'T');


/**
 * Implements hook_menu().
 */
function yellowcube_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/yellowcube'] = array(
    'title' => 'YellowCube',
    'description' => 'Configure YellowCube integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yellowcube_admin_settings_form'),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file' => 'includes/yellowcube.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function yellowcube_commerce_shipping_method_info() {
  return array(
    'yellowcube' => array(
      'title' => t('YellowCube'),
      'description' => t('Configure shipping through YellowCube'),
    ),
  );
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function yellowcube_commerce_shipping_service_info() {
  $services = array();

  $services['yellowcube'] = array(
    'title' => t('YellowCube'),
    'display_title' => t('YellowCube'),
    'description' => '',
    'shipping_method' => 'yellowcube',
    'callbacks' => array(
      'rate' => 'yellowcube_service_rate_order',
    ),
  );

  return $services;
}

/**
 * Implements hook_cron().
 */
function yellowcube_cron() {
  $queue = DrupalQueue::get('yellowcube_product_status');

  // Select products that either have never been sent to YellowCube or have been
  // changed since they were. Also include any products that were queued more
  // than 6 hours ago, since their processing is then assumed to have failed.
  $update_candidate = db_query("
    SELECT cp.product_id, sku, cp.title, cp.type, cp.created, cp.changed,
           yps.updated AS status_updated, yps.queued
    FROM {commerce_product} AS cp
    LEFT JOIN {yellowcube_product_status} AS yps USING (sku)
    WHERE (yps.article_status = 'enqueued' AND yps.queued < :previous)
          OR yps.article_status IS NULL OR yps.updated < cp.changed
  ", array(':previous' => REQUEST_TIME - 6 * 3600));

  foreach ($update_candidate as $up_cand) {
    $queue->createItem($up_cand);

    db_merge('yellowcube_product_status')
      ->key(array('sku' => $up_cand->sku))
      ->fields(array(
        'article_status' => 'enqueued',
        'queued' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 *  Implements hook_cron_queue_info().
 */
function yellowcube_cron_queue_info() {
  return array(
    'yellowcube_product_status' => array(
      'worker callback' => 'yellowcube_cron_process_product_status',
    ),
  );
}

/**
 * Worker callback for product status queue.
 *
 * @param stdClass $candidate
 */
function yellowcube_cron_process_product_status($candidate) {
  // TODO: Send data to YellowCube here.
  db_merge('yellowcube_product_status')
    ->key(array('sku' => $candidate->sku))
    ->fields(array(
      'article_status' => 'updated',
      'updated' => REQUEST_TIME,
      'queued' => NULL,
    ))
    ->execute();
}

/**
 * Shipping service callback: returns the base rate for a flat rate service.
 */
function yellowcube_service_rate_order($shipping_service, $order) {
  // TODO: Until it's determined what we do with shipping costs, we just give a random price.
  return array();
}
